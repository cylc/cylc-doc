.. _cylc-broadcast:

Cylc Broadcast
--------------

The ``cylc broadcast`` command overrides :cylc:conf:`[runtime]`
settings in a running workflow. This can
be used to communicate information to downstream tasks by broadcasting
environment variables (communication of information from one task to
another normally takes place via the filesystem, i.e. the input/output
file relationships embodied in inter-task dependencies). Variables (and
any other runtime settings) may be broadcast to all subsequent tasks,
or targeted specifically at a specific task, all subsequent tasks with a
given name, or all tasks with a given cycle point; see broadcast command help
for details.

Broadcast settings targeted at a specific task ID or cycle point expire and
are forgotten as the workflow moves on. Un-targeted variables and those
targeted at a task name persist throughout the workflow run, even across
restarts, unless manually cleared using the broadcast command - and so
should be used sparingly.




.. _Sub-Workflows:

Sub-Workflows
-------------

A single Cylc workflow can configure multiple cycling sequences in the graph,
but cycles can't be nested. If you need *cycles within cycles* - e.g. to
iterate over many files generated by each run of a cycling task - current
options are:

- parameterize the sub-cycles

  - this is easy but it makes more tasks-per-cycle, which is the primary
    determinant of workflow size and scheduler efficiency (this has a much
    smaller impact from Cylc 8 on, however).

- run a separate cycling workflow over the sub-cycle, inside a main-workflow
  task, for each main-workflow cycle point - i.e. use **sub-workflows**

  - this is very efficient, but monitoring and run-directory housekeeping may
    be more difficult because it creates multiple workflows and run directories

Sub-workflows must be started with ``--no-detach`` so that the containing task
does not finish until the sub-workflow does, and they should be non-cycling
or have a ``final cycle point`` so they don't keep on running indefinitely.

Sub-workflow names should normally incorporate the main-workflow cycle point (use
``$CYLC_TASK_CYCLE_POINT`` in the ``cylc play`` command line to start the
sub-workflow), so that successive sub-workflows can run concurrently if necessary and
do not compete for the same workflow run directory. This will generate a new
sub-workflow run directory for every main-workflow cycle point, so you may want to
put housekeeping tasks in the main workflow to extract the useful products from each
sub-workflow run and then delete the sub-workflow run directory.
