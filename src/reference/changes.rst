Changes
=======

.. _cylc-flow-changelog: https://github.com/cylc/cylc-flow/blob/master/CHANGES.md
.. _cylc-uiserver-changelog: https://github.com/cylc/cylc-uiserver/blob/master/CHANGES.md
.. _cylc-ui-changelog: https://github.com/cylc/cylc-ui/blob/master/CHANGES.md
.. _cylc-rose-changelog: https://github.com/cylc/cylc-rose/blob/master/CHANGES.md
.. _metomi-rose-changelog: https://github.com/metomi/rose/blob/master/CHANGES.md
.. _metomi-isodatetime-changelog: https://github.com/metomi/isodatetime/blob/master/CHANGES.md

This page contains a summary of significant changes across all Cylc components for each
release.

For more detail see the component changelogs:

* `cylc-flow-changelog`_
* `cylc-uiserver-changelog`_
* `cylc-ui-changelog`_
* `cylc-rose-changelog`_
* `metomi-rose-changelog`_
* `metomi-isodatetime-changelog`_

----------

Cylc 8.3.0
----------

.. TODO - uncomment before 8.3.0 release

   .. admonition:: Cylc Components
      :class: hint

      :cylc-flow: `8.3 <https://github.com/cylc/cylc-flow/blob/8.3.x/CHANGES.md>`__
      :cylc-uiserver: `1.4 <https://github.com/cylc/cylc-uiserver/blob/1.4.x/CHANGES.md>`__
      :cylc-rose: `1.4 <https://github.com/cylc/cylc-rose/blob/1.4.x/CHANGES.md>`__

Optional Outputs
^^^^^^^^^^^^^^^^

Optional outputs (introduced in Cylc 8.0.0) are a way of validating the outcome
of a task to ensure it "completed" as intended. E.G, by default, if a task
fails, it will considered :term:`incomplete <incomplete task>` and the
workflow will stall.

Before (Cylc 8.0.0 - 8.1.4)
   All optional outputs were completely "optional",
   that is to say, they may or may not be generated when a task runs.

From Cylc 8.3.0 onwards
   When optional outputs are defined in a workflow, Cylc
   now requires one or more of them to be generated by the task at runtime.

So for this example:

.. code-block:: cylc-graph

   a:x => x
   a:y => y
   x | y => b

The task must succeed (success is required unless marked otherwise) and at
least one of the outputs ``x`` or ``y`` must be generated.

In Python syntax that condition looks like this:

.. code-block:: python

   succeeded and (x or y)

If this condition is not met, then the task will be considered
:term:`incomplete <incomplete task>` altering you to the problem.

This change solves an issue where the pathway through the graph could be
interrupted.
E.G. in the above example, the intention is that Cylc will follow either the
``a:x`` branch *or* the ``a:y`` branch, however, with Cylc <=8.1.4 it is
possible that neither the ``x`` or ``y`` outputs would be generated, in which
case the task ``b`` would never be run.

This behaviour can be overridden using the
:cylc:conf:`[runtime][<namespace>]completion` configuration.
E.G. To restore the old behaviour

.. code-block:: cylc

   [runtime]
       [[a]]
           # this sets the condition that Cylc uses to determine whether a
           # task has completed
           completion = succeeded or failed

The new ``completion`` configuration opens up the potential for much
more powerful task diagnostics with :term:`custom outputs <custom output>`.

See :ref:`Graph Branching` for more information about optional outputs
and examples including the new ``completion`` configuration.


Task Expiry
^^^^^^^^^^^

As a result of the optional outputs change above, task expiry can now be used
in combination with optional outputs e.g:

.. code-block:: cylc-graph

   # run "x" if "a" succeeds
   a? => x
   # run "y" if "a" expires
   a:expired? => y

In this example, ``a:fail?`` is not handled in the graph, so if ``a`` fails,
it will be incomplete and the workflow will stall altering you to the problem.

This change means you need to add a ``?`` mark symbol after ``:expired``
triggers in the graph.

The new ``completion`` configuration can also be used in combination with
task expiry e.g:

.. code-block:: cylc

   [runtime]
       [[a]]
           # this task is allowed to succeed or expire but not fail
           completion = succeeded or expired


----------

Cylc 8.2.0
----------

.. admonition:: Cylc Components
   :class: hint

   :cylc-flow: `8.2 <https://github.com/cylc/cylc-flow/blob/8.2.x/CHANGES.md>`__
   :cylc-uiserver: `1.3 <https://github.com/cylc/cylc-uiserver/blob/1.3.x/CHANGES.md>`__
   :cylc-rose: `1.3 <https://github.com/cylc/cylc-rose/blob/1.3.x/CHANGES.md>`__


Configure The Default View
^^^^^^^^^^^^^^^^^^^^^^^^^^

You can now configure the view which is opened by default when you navigate to
a new workflow in the GUI. Navigate to the settings page to select your chosen
view.

.. image:: changes/ui-view-selector.jpg
   :width: 100%

In the future we plan to support configuring a layout of multiple views and
configuring certain options on those views.


Reload
^^^^^^

When workflows are
:ref:`reloaded <Reloading The Workflow Configuration At Runtime>`,
(e.g. by ``cylc reload``), Cylc will now pause the workflow and wait for any
preparing tasks to be submitted before proceeding with the reload.
Once the reload has been completed, the workflow will be resumed.

You can now see more information about the status of the reload in the
workflow status message which appears at the top of the GUI and Tui interfaces.

----------

Cylc 8.1.0
----------

.. admonition:: Cylc Components
   :class: hint

   :cylc-flow: `8.1 <https://github.com/cylc/cylc-flow/blob/8.1.x/CHANGES.md>`__
   :cylc-uiserver: `1.2 <https://github.com/cylc/cylc-uiserver/blob/1.2.x/CHANGES.md>`__
   :cylc-rose: `1.1 <https://github.com/cylc/cylc-rose/blob/1.1.0/CHANGES.md#user-content-cylc-rose-110-released-2022-07-28>`__

.. warning::

   Workflows started with Cylc 8.0 which contain multiple :term:`flows <flow>`
   **cannot** be restarted with Cylc 8.1 due to database changes.


Graph View
^^^^^^^^^^

The web UI now has a graph view which displays a visualisation of a workflow's graph:

.. image:: changes/cylc-graph.gif
   :width: 80%

Family & cycle grouping as well as the ability to view graphs for stopped workflows
will be added in later releases.


Log View
^^^^^^^^

The web UI now has a log view which displays workflow and job log files:

.. image:: changes/log-view-screenshot.png
   :width: 80%

Support for viewing more log files, syntax highlighting, searching and line
numbers are planned for future releases.

Edit Runtime
^^^^^^^^^^^^

The web UI now has a command for editing the :cylc:conf:`[runtime]` section
of a task or family.

.. image:: changes/edit-runtime-screenshot.png
   :width: 80%

Any changes made are :ref:`broadcast <cylc-broadcast>` to the running workflow.

Analysis View
^^^^^^^^^^^^^

.. versionadded:: cylc-uiserver 1.2.2

The web UI also has a new view for displaying task queue & run time statistics.

.. image:: changes/analysis_view.gif
   :width: 80%

Combined Commands
^^^^^^^^^^^^^^^^^

Two new commands have been added as short-cuts for common working patterns:

``cylc vip``
   Validate, install and plays a workflow, equivalent to:

   .. code-block:: bash

      cylc validate <path>
      cylc install <path>
      cylc play <id>

``cylc vr``
   Validate and reinstall a workflow, then either:
   - reload the workflow if it is running.
   - restart the workflow if it is stopped.

.. image:: changes/vip-vr.gif
   :width: 100%

For more information see the command line help:

.. code-block:: bash

   cylc vip --help
   cylc vr --help


Bash Completion
^^^^^^^^^^^^^^^

Cylc now provides a high performance Bash completion script which saves you typing:

* Cylc commands & options
* Workflow IDs
* Cycle points
* Task names
* Job numbers

.. image:: changes/cylc-completion.bash.gif
   :width: 80%

:ref:`Installation instructions <installation.shell_auto_completion>`.

----------

Cylc 8.0.0
----------

.. admonition:: Cylc Components
   :class: hint

   :cylc-flow: `8.0 <https://github.com/cylc/cylc-flow/blob/8.0.0/CHANGES.md#user-content-major-changes-in-cylc-8>`__
   :cylc-uiserver: `1.1 <https://github.com/cylc/cylc-uiserver/blob/1.1.0/CHANGES.md#user-content-cylc-uiserver-110-released-2022-07-28>`__
   :cylc-rose: `1.1 <https://github.com/cylc/cylc-rose/blob/1.1.0/CHANGES.md#user-content-cylc-rose-110-released-2022-07-28>`__

The first official release of Cylc 8.

For a summary of changes see the :ref:`migration guide<728.overview>`.
